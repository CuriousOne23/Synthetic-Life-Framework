entropy = [1.0]         # Starting entropy
slope = [0.0]           # Initial slope
max_delta = 0.2         # Governance constraint: max slope change per step

for i in range(1, steps):
    # Step 1: Generate raw perturbation (random push to entropy)
	# Choose below if you want to simulate a system collapsing
    raw_perturb = np.random.uniform(0.8, 1.2) 
	# Choose below if you want to simulate a system that can restore or decayâ€”more lifelike, more nuanced.
	raw_perturb = np.random.uniform(0.8, 1.2)

    # Step 2: Calculate proposed slope change
    proposed_slope = raw_perturb

    # Step 3: Compare with previous slope
    delta = proposed_slope - slope[-1]

    # Step 4: Apply Governance constraint, limit how quickly the slope increases/decreases
    if delta > max_delta:
        constrained_slope = slope[-1] + max_delta # limit the increase of the slope
    elif delta < -max_delta:
        constrained_slope = slope[-1] - max_delta # limit how much the slope declines
    else:
        constrained_slope = proposed_slope

    # Step 5: Update entropy and slope
    new_entropy = entropy[-1] + constrained_slope
    entropy.append(new_entropy)
    slope.append(constrained_slope)
